type CreateCommentResponse {
  res: Boolean!
  error: String
}

type Mutation {
  CreateComment(feedId: String!, comment: String!): CreateCommentResponse!
  DeleteComment(commentId: String!): DeleteCommentResponse!
  UpdateComment(commentId: String!, comment: String!): UpdateCommentResponse!
  CreateFeed(photo: String!, text: String!): CreateFeedResponse!
  DeleteFeed(feedId: String!): DeleteFeedResponse!
  UpdateFeed(feedId: String!, text: String): UpdateFeedResponse!
  CreateLike(feedId: String!): CreateLikeResponse!
  DeleteLike(feedId: String!): DeleteLikeResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(firstName: String!, password: String!, email: String!): EmailSignUpResponse!
  ResetPassword(email: String, phone: String, password: String!): ResetPasswordResponse!
  UpdateUser(phone: String, isEmailVerified: Boolean, isPhoneVerified: Boolean, email: String, password: String, newPassword: String, profilePhoto: String): UpdateUserResponse!
  RequestVerification(type: String!, payload: String!): RequestVerificationResponse!
  ValidateVerification(payload: String!, key: String!): ValidateVerificationResponse!
}

type DeleteCommentResponse {
  res: Boolean!
  error: String
}

type GetCommentsResponse {
  res: Boolean!
  error: String
  comments: [Comment]
}

type Query {
  GetComments(feedId: String!): GetCommentsResponse!
  FindFeedsByHashtag(search: String!): FindFeedsByHashtagResponse!
  GetFeed(feedId: String!): GetFeedResponse!
  GetFeeds(page: Int!): GetFeedsResponse!
  GetFeedsByUser(userId: String!): GetFeedsByUserResponse!
  FindHashtagsByTag(search: String!): FindHashtagsByTagResponse!
  GetTaggedFeeds(tag: String!): GetTaggedFeedsResponse!
  FindUserByUsername(search: String!): FindUserByUsernameResponse!
  GetCurrentUser: GetCurrentUserResponse!
  GetUserById(userId: String!): GetUserByIdResponse!
  ForgetPassword(type: String!, payload: String!): ForgetPasswordResponse!
}

type Comment {
  id: String!
  comment: String
  user: User
  userId: String
  feed: Feed
  feedId: String
  createAt: String!
  updateAt: String!
}

type UpdateCommentResponse {
  res: Boolean!
  error: String
}

type CreateFeedResponse {
  res: Boolean!
  error: String
}

type DeleteFeedResponse {
  res: Boolean!
  error: String
}

type FindFeedsByHashtagResponse {
  res: Boolean!
  error: String
  feeds: [Feed]
}

type GetFeedResponse {
  res: Boolean!
  error: String
  feed: Feed
}

type GetFeedsResponse {
  res: Boolean!
  error: String
  feeds: [Feed]
}

type GetFeedsByUserResponse {
  res: Boolean!
  error: String
  feeds: [Feed]
}

type Feed {
  id: String!
  photo: String!
  text: String
  user: User
  likes: [Like]
  tags: [Hashtag]
  comments: [Comment]
  createAt: String!
  updateAt: String!
}

type Subscription {
  SubscribeFeed: Feed
}

type UpdateFeedResponse {
  res: Boolean!
  error: String
}

type FindHashtagsByTagResponse {
  res: Boolean!
  error: String
  tags: [Hashtag]
}

type GetTaggedFeedsResponse {
  res: Boolean!
  error: String
  feeds: [Feed]
}

type Hashtag {
  id: String!
  tag: String!
  feeds: [Feed]
}

type CreateLikeResponse {
  res: Boolean!
  error: String
}

type DeleteLikeResponse {
  res: Boolean!
  error: String
}

type Like {
  id: String!
  user: User!
  feed: Feed!
  feedId: String
  userId: String
  createAt: String
  updateAt: String
}

type EmailSignInResponse {
  res: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  res: Boolean!
  error: String
  token: String
}

type FindUserByUsernameResponse {
  res: Boolean!
  error: String
  users: [User]
}

type GetCurrentUserResponse {
  res: Boolean!
  error: String
  user: User
}

type GetUserByIdResponse {
  res: Boolean!
  error: String
  user: User
}

type ResetPasswordResponse {
  res: Boolean!
  error: String
  token: String
}

type User {
  id: String!
  fbId: String
  googleId: String
  firstName: String!
  lastName: String
  password: String
  profilePhoto: String!
  email: String
  isEmailVerified: Boolean
  phone: String
  isPhoneVerified: Boolean
  feeds: [Feed]
  likes: [Like]
  comments: [Comment]
  createAt: String!
  updateAt: String!
}

type UpdateUserResponse {
  res: Boolean!
  error: String
}

type ForgetPasswordResponse {
  res: Boolean!
  error: String
  key: String
}

type RequestVerificationResponse {
  res: Boolean!
  error: String
}

type Verification {
  id: String!
  type: String!
  payload: String!
  key: String!
  isVerified: Boolean!
  createAt: String!
  updateAt: String!
}

type ValidateVerificationResponse {
  res: Boolean!
  error: String
}
