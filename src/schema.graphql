type Comment {
  id: String!
  comment: String
  user: User
  feed: Feed
  createAt: String!
  updateAt: String!
}

type CreateFeedResponse {
  res: Boolean!
  error: String
}

type Mutation {
  CreateFeed(photo: String!, text: String!): CreateFeedResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(firstName: String!, lastName: String!, password: String!, email: String!): EmailSignUpResponse!
  RequestVerification(type: String!, payload: String!): RequestVerificationResponse!
  ValidateVerification(payload: String!, key: String!): ValidateVerificationResponse!
}

type GetFeedsResponse {
  res: Boolean!
  error: String
  feeds: [Feed]
}

type Query {
  GetFeeds(page: Int!): GetFeedsResponse!
  GetFeedsByUser(userId: String!): GetFeedsByUserResponse!
  GetUserFeed: GetUserFeedResponse!
  GetCurrentUser: GetCurrentUserResponse!
}

type GetFeedsByUserResponse {
  res: Boolean!
  error: String
  feeds: [Feed]
}

type GetUserFeedResponse {
  res: Boolean!
  error: String
}

type Feed {
  id: String!
  photo: String!
  text: String
  user: User
  likes: [User]
  comments: [Comment]
  createAt: String!
  updateAt: String!
}

type EmailSignInResponse {
  res: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  res: Boolean!
  error: String
  token: String
}

type GetCurrentUserResponse {
  res: Boolean!
  error: String
  user: User
}

type User {
  id: String!
  fbId: String
  googleId: String
  firstName: String!
  lastName: String!
  password: String!
  profilePhoto: String
  email: String!
  isEmailVerified: Boolean
  phone: String
  isPhoneVerified: Boolean
  feeds: [Feed]
  likes: [Feed]
  comments: [Comment]
  createAt: String!
  updateAt: String!
}

type RequestVerificationResponse {
  res: Boolean!
  error: String
}

type Verification {
  id: String!
  type: String!
  payload: String!
  key: String!
  isVerified: Boolean!
  createAt: String!
  updateAt: String!
}

type ValidateVerificationResponse {
  res: Boolean!
  error: String
}
